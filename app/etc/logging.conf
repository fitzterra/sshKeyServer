# This file configures logging for the application. It will be evaluated by the
# Python logging.config.fileConfig() funtion to set up logging.
#
# NOTE: Any file based handler should use the logDir name as base for where log
#       files should go. The app will add the full path to the log directory in
#       this variable and make it available in the logging module namespace
#       before reading this config file.

#--- MAIN Sections ---
[loggers]
keys=root,cpAccess,cpError

[handlers]
keys=console,timeRotateFile,cpError,cpAccess

[formatters]
keys=std,cp

#--- LOGGER Sections ---
# The root logger is the catch all logger and is set to log any message.
# It logs to the timed rotating log file
[logger_root]
level=NOTSET
handlers=timeRotateFile

# The CherryPy request logger. Logs to the access timed rotating log file. It's
# propagation is set to false to limit logging to only this logger
[logger_cpAccess]
level=NOTSET
handlers=cpAccess
propagate=0
qualname=cherrypy.access

# The CherryPy error/info logger. Logs to the error timed rotating log file. It's
# propagation is set to false to limit logging to only this logger
[logger_cpError]
level=NOTSET
handlers=cpError
propagate=0
qualname=cherrypy.error


#--- HANDLER Sections ---
# The basic console logger, logging to standard error
[handler_console]
class=StreamHandler
args=(sys.stderr,)
formatter=std

# A timed rotating file handler logging to the application log
[handler_timeRotateFile]
class=handlers.TimedRotatingFileHandler
# Logs to app.log, rotates midnight, with interval of 1, keeping 10 backups
args=(logDir+'/app.log', 'midnight', 1, 10)
formatter=std

# A timed rotating file handler for Cherrpy access logging
[handler_cpAccess]
class=handlers.TimedRotatingFileHandler
# Logs to access.log, rotates midnight, with interval of 1, keeping 10 backups
args=(logDir+'/access.log', 'midnight', 1, 10)
formatter=cp

# A timed rotating file handler for Cherrpy Error Logging
[handler_cpError]
class=handlers.TimedRotatingFileHandler
# Logs to error.log, rotates midnight, with interval of 1, keeping 10 backups
args=(logDir+'/error.log', 'midnight', 1, 10)
formatter=cp


#--- FORMATTER Sections ---
# The standard log formatter
[formatter_std]
format=[%(asctime)s] %(levelname)s (%(name)s): %(message)s

# The CherryPy lgo formatter. Only log the message, as everyting else is in the
# log message already.
[formatter_cp]
format=%(message)s


#_____________________________
# vim: tw=79 formatoptions+=t
